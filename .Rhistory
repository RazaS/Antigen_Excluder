status_colors <- c(exposure = "#0074D9", outcome = "#FF4136", latent = "grey50")
# Fancier graph
ggplot(math_camp_dag_tidy, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_edges() +
geom_dag_point(aes(color = status)) +
geom_dag_label_repel(aes(label = label, fill = status), seed = 1234,
color = "white", fontface = "bold") +
scale_color_manual(values = status_colors, na.value = "grey20") +
scale_fill_manual(values = status_colors, na.value = "grey20") +
guides(color = FALSE, fill = FALSE) +
theme_dag()
library(ggdag)
library(ggplot2)
library(tidyverse)
library('Cairo')
CairoWin()
node_details <- tribble(
~name, ~label, ~x, ~y,
"tx", "Fatigue", 4, 2,
"hb", "↑Lead", 2, 2,
"gd", "↓SES", 3, 2.25,
"ldb", "Anemia", 3, 2,
"pf", "↓Zinc", 3, 1.75
)
node_labels <- node_details$label
names(node_labels) <- node_details$name
math_camp_dag <- dagify(tx ~ ldb + gd + pf,
ldb ~ hb + pf,
hb ~ gd,
exposure = "hb",
outcome = "tx",
#latent = "met",
coords = node_details,
labels = node_labels)
# Turn DAG into a tidy data frame for plotting
math_camp_dag_tidy <- math_camp_dag %>%
tidy_dagitty() %>%
node_status()   # Add column for exposure/outcome/latent
status_colors <- c(exposure = "#0074D9", outcome = "#FF4136", latent = "grey50")
# Fancier graph
ggplot(math_camp_dag_tidy, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_edges() +
geom_dag_point(aes(color = status)) +
geom_dag_label_repel(aes(label = label, fill = status), seed = 1234,
color = "white", fontface = "bold") +
scale_color_manual(values = status_colors, na.value = "grey20") +
scale_fill_manual(values = status_colors, na.value = "grey20") +
guides(color = FALSE, fill = FALSE) +
theme_dag()
library(ggdag)
library(ggplot2)
library(tidyverse)
library('Cairo')
CairoWin()
node_details <- tribble(
~name, ~label, ~x, ~y,
"raza", "Raza", 4, 2,
"ha", "Headaches", 2, 2,
"prop", "Headache Propensity", 3, 2.25,
"te", "Talking Excessively", 3, 2,
"pf", "↓Zinc", 3, 1.75
)
node_labels <- node_details$label
names(node_labels) <- node_details$name
math_camp_dag <- dagify(raza ~ te + prop + pf,
te ~ ha + pf,
ha ~ prop,
exposure = "ha",
outcome = "raza",
#latent = "met",
coords = node_details,
labels = node_labels)
# Turn DAG into a tidy data frame for plotting
math_camp_dag_tidy <- math_camp_dag %>%
tidy_dagitty() %>%
node_status()   # Add column for exposure/outcome/latent
status_colors <- c(exposure = "#0074D9", outcome = "#FF4136", latent = "grey50")
# Fancier graph
ggplot(math_camp_dag_tidy, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_edges() +
geom_dag_point(aes(color = status)) +
geom_dag_label_repel(aes(label = label, fill = status), seed = 1234,
color = "white", fontface = "bold") +
scale_color_manual(values = status_colors, na.value = "grey20") +
scale_fill_manual(values = status_colors, na.value = "grey20") +
guides(color = FALSE, fill = FALSE) +
theme_dag()
library(ggdag)
library(ggplot2)
library(tidyverse)
library('Cairo')
CairoWin()
node_details <- tribble(
~name, ~label, ~x, ~y,
"raza", "Headaches", 4, 2,
"ha", "Raza", 2, 2,
"prop", "Headache Propensity", 3, 2.25,
"te", "Talking Excessively", 3, 2,
"pf", "Too Much Time", 3, 1.75
)
node_labels <- node_details$label
names(node_labels) <- node_details$name
math_camp_dag <- dagify(raza ~ te + prop + pf,
te ~ ha + pf,
ha ~ prop,
exposure = "ha",
outcome = "raza",
#latent = "met",
coords = node_details,
labels = node_labels)
# Turn DAG into a tidy data frame for plotting
math_camp_dag_tidy <- math_camp_dag %>%
tidy_dagitty() %>%
node_status()   # Add column for exposure/outcome/latent
status_colors <- c(exposure = "#0074D9", outcome = "#FF4136", latent = "grey50")
# Fancier graph
ggplot(math_camp_dag_tidy, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_edges() +
geom_dag_point(aes(color = status)) +
geom_dag_label_repel(aes(label = label, fill = status), seed = 1234,
color = "white", fontface = "bold") +
scale_color_manual(values = status_colors, na.value = "grey20") +
scale_fill_manual(values = status_colors, na.value = "grey20") +
guides(color = FALSE, fill = FALSE) +
theme_dag()
library(ggdag)
library(ggplot2)
library(tidyverse)
library('Cairo')
CairoWin()
node_details <- tribble(
~name, ~label, ~x, ~y,
"raza", "Headaches", 4, 2,
"ha", "Raza", 2, 2,
"prop", "Headache Propensity", 3, 2.25,
"te", "Overthinking", 3, 2,
"pf", "Coffee", 3, 1.75
)
node_labels <- node_details$label
names(node_labels) <- node_details$name
math_camp_dag <- dagify(raza ~ te + prop + pf,
te ~ ha + pf,
ha ~ prop,
exposure = "ha",
outcome = "raza",
#latent = "met",
coords = node_details,
labels = node_labels)
# Turn DAG into a tidy data frame for plotting
math_camp_dag_tidy <- math_camp_dag %>%
tidy_dagitty() %>%
node_status()   # Add column for exposure/outcome/latent
status_colors <- c(exposure = "#0074D9", outcome = "#FF4136", latent = "grey50")
# Fancier graph
ggplot(math_camp_dag_tidy, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_edges() +
geom_dag_point(aes(color = status)) +
geom_dag_label_repel(aes(label = label, fill = status), seed = 1234,
color = "white", fontface = "bold") +
scale_color_manual(values = status_colors, na.value = "grey20") +
scale_fill_manual(values = status_colors, na.value = "grey20") +
guides(color = FALSE, fill = FALSE) +
theme_dag()
install.packages("sf")
install.packages("raster")
install.packages("spData")
remotes::install_github("Nowosad/spDataLarge")
library(sf)          # classes and functions for vector data
library(raster)      # classes and functions for raster data
library(spData)        # load geographic data
library(spDataLarge)   # load larger geographic data
install.packages("spData")
install.packages("spData")
library(sf)          # classes and functions for vector data
library(raster)      # classes and functions for raster data
library(spData)        # load geographic data
library(spDataLarge)   # load larger geographic data
vignette(package = "sf") # see which vignettes are available
vignette("sf1")          # an introduction to the package
library(shiny); runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
library(shiny); runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/TRX_Classifier/TRX_Classifier.R')
library(shiny)
library(DT)
# Define UI
ui <- fluidPage(
titlePanel("Antibody Reaction to Enzyme Treatment"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("antibody", "Choose Antibodies:",
choices = c("ABTI", "AnWj", "Ata", "Ch", "Co3", "Coa", "Cra", "CRAM", "CROV")),
radioButtons("enzyme", "Enzyme Treatment:",
choices = c("None" = "None", "TRY" = "TRY", "CHY" = "CHY", "PAP" = "PAP", "DTT" = "DTT"))
),
mainPanel(
DTOutput("resultsTable")
)
)
)
# Define server logic
server <- function(input, output) {
# Data frame representing the initial table
data <- data.frame(
Antibody = c("ABTI", "AnWj", "Ata", "Ch", "Co3", "Coa", "Cra", "CRAM", "CROV"),
TRY = c("+", "+", "+", "0", "+", "+", "+", "+", "+"),
CHY = c("+", "+", "+", "0", "+", "+", "0", "0", "0"),
PAP = c("+", "+", "+", "0", "+", "+", "+", "+", "+"),
DTT = c("+", "+", "+", "+", "+", "+", "w", "w", "w"),
stringsAsFactors = FALSE
)
# Reactive expression to filter the data based on selections
filteredData <- reactive({
if (input$enzyme == "None") {
return(data)
} else {
selectedData <- data[, c("Antibody", input$enzyme), drop = FALSE]
colnames(selectedData)[2] <- "Result"
return(selectedData)
}
})
# Render the table based on the reactive expression
output$resultsTable <- renderDT({
req(input$antibody)
df <- filteredData()
df <- df[df$Antibody %in% input$antibody, ]
datatable(df, options = list(pageLength = 5))
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/AntigenExcluder/antigen_excluder.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/AntigenExcluder/antigen_excluder.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/AntigenExcluder/antigen_excluder.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/AntigenExcluder/antigen_excluder.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/AntigenExcluder/antigen_excluder.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/AntigenExcluder/antigen_excluder.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/AntigenExcluder/antigen_excluder.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/AntigenExcluder/antigen_excluder.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/AntigenExcluder/antigen_excluder.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/AntigenExcluder/antigen_excluder.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/AntigenExcluder/antigen_excluder.R')
runApp('C:/Users/sheharyar.raza/OneDrive - University of Toronto/AntigenExcluder/antigen_excluder.R')
# Load required library
library(readr)
# Read data from CSV file
data <- read_csv("data_excluder.csv")
setwd("C:/Users/sheharyar.raza/OneDrive - University of Toronto/AntigenExcluder")
# Load required library
library(readr)
# Read data from CSV file
data <- read_csv("data_excluder.csv")
# Define the ranking system
rankings <- c("0", "+/0", "+/w", "*+/w", "+")
rank_values <- setNames(seq_along(rankings), rankings)
# Function to get the highest rank
get_highest_rank <- function(values) {
ranks <- rank_values[values]
return(names(which.max(ranks)))
}
# Ask user for antibodies and enzymes
antibodies_selected <- as.character(readline(prompt = "Enter the antibodies (separated by comma): "))
# Convert input strings to vectors
antibodies_vector <- unlist(strsplit(antibodies_selected, ","))
enzymes_vector <- unlist(strsplit(enzymes_selected, ","))
# Load required library
library(readr)
# Read data from CSV file
data <- read_csv("data_excluder.csv")
# Define the ranking system
rankings <- c("0", "+/0", "+/w", "*+/w", "+")
rank_values <- setNames(seq_along(rankings), rankings)
# Function to get the highest rank
get_highest_rank <- function(values) {
ranks <- rank_values[values]
return(names(which.max(ranks)))
}
# Ask user for antibodies and enzymes
antibodies_selected <- as.character(readline(prompt = "Enter the antibodies (separated by comma): "))
# Convert input strings to vectors
antibodies_vector <- unlist(strsplit(antibodies_selected, ","))
enzymes_vector <- unlist(strsplit(enzymes_selected, ","))
enzymes_selected <- as.character(readline(prompt = "Enter the enzymes (separated by comma): "))
library(readr)
# Read data from CSV file
data <- read_csv("data_excluder.csv")
# Define the ranking system
rankings <- c("0", "+/0", "+/w", "*+/w", "+")
rank_values <- setNames(seq_along(rankings), rankings)
# Function to get the highest rank
get_highest_rank <- function(values) {
ranks <- rank_values[values]
return(names(which.max(ranks)))
}
# Ask user for antibodies and enzymes
antibodies_selected <- as.character(readline(prompt = "Enter the antibodies (separated by comma): "))
# Convert input strings to vectors
antibodies_vector <- unlist(strsplit(antibodies_selected, ","))
enzymes_vector <- unlist(strsplit(enzymes_selected, ","))
# Process data
results <- list()
for (antibody in antibodies_vector) {
antibody_values <- data[data$Antibody == antibody, enzymes_vector, drop = FALSE]
highest_rank <- get_highest_rank(antibody_values)
results[[antibody]] <- highest_rank
}
# Load required library
library(readr)
# Read data from CSV file
data <- read_csv("data_excluder.csv")
# Define the ranking system
rankings <- c("0", "+/0", "+/w", "*+/w", "+")
rank_values <- setNames(seq_along(rankings), rankings)
# Function to get the highest rank
get_highest_rank <- function(values) {
ranks <- rank_values[values]
return(names(which.max(ranks)))
}
# Ask user for antibodies and enzymes
antibodies_selected <- as.character(readline(prompt = "Enter the antibodies (separated by comma): "))
# Convert input strings to vectors
antibodies_vector <- unlist(strsplit(antibodies_selected, ","))
enzymes_vector <- unlist(strsplit(enzymes_selected, ","))
# Process data
results <- list()
for (antibody in antibodies_vector) {
antibody_values <- data[data$Antibody == antibody, enzymes_vector, drop = FALSE]
highest_rank <- get_highest_rank(antibody_values)
results[[antibody]] <- highest_rank
}
# Load required library
library(readr)
# Read data from CSV file
data <- read_csv("data_excluder.csv")
# Define the ranking system
rankings <- c("0", "+/0", "+/w", "*+/w", "+")
rank_values <- setNames(seq_along(rankings), rankings)
# Function to get the highest rank
get_highest_rank <- function(values) {
ranks <- rank_values[values]
return(names(which.max(ranks)))
}
# Ask user for antibodies and enzymes
antibodies_selected <- as.character(readline(prompt = "Enter the antibodies (separated by comma): "))
# Convert input strings to vectors
antibodies_vector <- unlist(strsplit(antibodies_selected, ","))
enzymes_vector <- unlist(strsplit(enzymes_selected, ","))
# Process data
results <- list()
for (antibody in antibodies_vector) {
antibody_values <- data[data$Antibody == antibody, enzymes_vector, drop = FALSE]
highest_rank <- get_highest_rank(antibody_values)
results[[antibody]] <- highest_rank
}
# Load required library
library(readr)
# Read data from CSV file
data <- read_csv("data_excluder.csv")
# Define the ranking system
rankings <- c("0", "+/0", "w", "+/w", "+")
rank_values <- setNames(seq_along(rankings), rankings)
# Function to get the highest rank
get_highest_rank <- function(values) {
ranks <- rank_values[values]
return(names(which.max(ranks)))
}
# Ask user for antibodies and enzymes
antibodies_selected <- as.character(readline(prompt = "Enter the antibodies (separated by comma): "))
# Convert input strings to vectors and remove spaces
antibodies_vector <- unlist(strsplit(antibodies_selected, ",\\s*"))
enzymes_vector <- unlist(strsplit(enzymes_selected, ",\\s*"))
# Check if the selected antibodies and enzymes exist in the data
valid_antibodies <- antibodies_vector %in% data$Antibody
valid_enzymes <- enzymes_vector %in% colnames(data)
if (!all(valid_antibodies)) {
stop("One or more selected antibodies do not exist in the data.")
}
# Load required library
library(readr)
# Read data from CSV file
data <- read_csv("data_excluder.csv")
# Define the ranking system
rankings <- c("0", "+/0", "w", "+/w", "+")
rank_values <- setNames(seq_along(rankings), rankings)
# Function to get the highest rank
get_highest_rank <- function(values) {
ranks <- rank_values[values]
return(names(which.max(ranks)))
}
# Ask user for antibodies and enzymes
antibodies_selected <- c("Ch","Coa")
enzymes_selected <- c("TRY")
# Convert input strings to vectors and remove spaces
antibodies_vector <- unlist(strsplit(antibodies_selected, ",\\s*"))
enzymes_vector <- unlist(strsplit(enzymes_selected, ",\\s*"))
# Check if the selected antibodies and enzymes exist in the data
valid_antibodies <- antibodies_vector %in% data$Antibody
valid_enzymes <- enzymes_vector %in% colnames(data)
if (!all(valid_antibodies)) {
stop("One or more selected antibodies do not exist in the data.")
}
if (!all(valid_enzymes)) {
stop("One or more selected enzymes do not exist in the data.")
}
# Process data
results <- list()
for (antibody in antibodies_vector) {
antibody_values <- data[data$Antibody == antibody, enzymes_vector, drop = FALSE]
highest_rank <- get_highest_rank(antibody_values)
results[[antibody]] <- highest_rank
}
library(shiny)
ui <- fluidPage(
titlePanel("Antibody and Enzyme Treatment Analysis"),
sidebarLayout(
sidebarPanel(
# Column 1: Antibody selection
checkboxGroupInput("chosen_ab", "Select Antibodies:",
choices = df$Antibody),
# Column 2: Enzyme treatment selection
checkboxGroupInput("chosen_enzyme", "Select Enzyme Treatments:",
choices = colnames(df)[-1])
),
mainPanel(
# Column 3: Output table
tableOutput("results_table")
)
)
)
library(shiny)
ui <- fluidPage(
titlePanel("Antibody and Enzyme Treatment Analysis"),
sidebarLayout(
sidebarPanel(
# Column 1: Antibody selection
checkboxGroupInput("chosen_ab", "Select Antibodies:",
choices = NULL),
# Column 2: Enzyme treatment selection
checkboxGroupInput("chosen_enzyme", "Select Enzyme Treatments:",
choices = NULL)
),
mainPanel(
# Column 3: Output table
tableOutput("results_table")
)
)
)
server <- function(input, output) {
# Load data inside the server function
df <- reactive({
# Replace with the actual code to read your CSV file
read.csv("path_to_your/data_excluder.csv")
})
# Update checkbox choices based on the data
observe({
updateCheckboxGroupInput(session, "chosen_ab",
choices = df()$Antibody)
updateCheckboxGroupInput(session, "chosen_enzyme",
choices = colnames(df())[-1])
})
output$results_table <- renderTable({
# Ensure data is available
if(is.null(df())) return()
# Filtering and processing the data
filtered_data <- df()[df()$Antibody %in% input$chosen_ab, ]
selected_enzymes <- input$chosen_enzyme
# Function to classify antibodies
classify_antibody <- function(row) {
for (enzyme in selected_enzymes) {
if (row[enzyme] == "0") {
return("0")
}
}
for (enzyme in selected_enzymes) {
if (row[enzyme] == "+/0") {
return("+/0")
}
}
for (enzyme in selected_enzymes) {
if (row[enzyme] == "w") {
return("w")
}
}
for (enzyme in selected_enzymes) {
if (row[enzyme] == "+/w") {
return("+/w")
}
}
return("+")
}
# Apply the classification function
results <- apply(filtered_data, 1, classify_antibody)
# Preparing the final table for output
final_table <- table(results)
return(final_table)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('antigen_excluder.R')
runApp('antigen_excluder.R')
